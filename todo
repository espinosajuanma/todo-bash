#!/bin/bash
# shellcheck disable=SC2016
set -e

(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1

: "${PAGER:=more}"
: "${EDITOR:=vi}"
: "${HELP_BROWSER:=}"
: "${EXE:="${0##*/}"}"

declare -A HELP
declare -A CONF

declare black="\e[30m"
declare red="\e[31m"
declare green="\e[32m"
declare yellow="\e[33m"
declare blue="\e[34m"
declare magenta="\e[35m"
declare cyan="\e[36m"
declare white="\e[37m"
declare reset="\e[0m"

_initialize() {
  REMOTE="$(x.config remote)"
  TODO_PATH="$(x.config.dir)/tasks"

  CATEGORIES=("todo" "working" "finished" "archived")
  _create_dirs

  if [[ ! -d "$TODO_PATH/.git" ]]; then
    git -C "$TODO_PATH" init "$TODO_PATH" > /dev/null
  fi
}

_alternatives() {
  # put alternative argument possibilities here
  if [[ -z "$CMD" || "$CMD" == "ls" ]];then
    x.list
  elif [[ "$CMD" == "rm" ]]; then
    x.remove "$@"
  elif [[ "$CMD" == "ed" || "$CMD" == "e" ]]; then
    x.edit "$@"
  elif [[ "$CMD" == "view" ]]; then
    x.show "$@"
  elif [[ "$CMD" == "todo" ]]; then
    x.list.todo
  elif [[ "$CMD" == "working" ]]; then
    x.list.working
  elif [[ "$CMD" == "finished" ]]; then
    x.list.finished
  elif [[ "$CMD" == "archived" ]]; then
    x.list.archived
  fi
}

HELP[list]='Returns a list of todo, working and finished tasks'

x.list() {
  x.list.todo
  x.list.working
  x.list.finished
}


HELP[list.todo]='Returns a list of todo tasks'

x.list.todo() {
  if [[ "$(ls -A $TODO_PATH/todo)" ]]; then
    printf "\e[32;1mTO DO\e[0m\n\n"
    _print_items "todo"
    printf "\n"
  fi
}


HELP[list.working]='Returns a list of working tasks'

x.list.working() {
  if [[ "$(ls -A $TODO_PATH/working)" ]]; then
    printf "\e[32;1mWORKING\e[0m\n\n"
    _print_items "working"
    printf "\n"
  fi
}

HELP[list.finished]='Returns a list of finished tasks'

x.list.finished() {
  if [[ "$(ls -A $TODO_PATH/finished)" ]]; then
    printf "\e[32;1mFINISHED\e[0m\n\n"
    _print_items "finished"
    printf "\n"
  fi
}

HELP[list.archived]='Returns a list of archived tasks'

x.list.archived() {
  if [[ "$(ls -A $TODO_PATH/archived)" ]]; then
    printf "\e[31;1mARCHIVED\e[0m\n\n"
    _print_items "archived"
    printf "\n"
  fi
}

HELP[add]='Creates a task and open it in the editor'

x.add() {
  # Create new markdown file with unique name
  filename="$(_isosec).md"
  title="$*"
  if [[ -z "$title" ]]; then
    read -p "Title: " title
  fi
  if [[ -z "$title" ]]; then
    echo "Error: Title can't be empty"
    exit 1
  fi
  echo "# $title" > "$TODO_PATH/todo/$filename"

  read -p "Edit body? (y/N) " confirm
  confirm="${confirm,,}"
  if [[ "$confirm" =~ ^(yes|y)$ ]]; then
    $EDITOR "$TODO_PATH/todo/$filename"
  fi

  title="$(_get_title "$TODO_PATH/todo/$filename")"
  git -C "$TODO_PATH" add "$TODO_PATH/todo/$filename"
  git -C "$TODO_PATH" commit -m "$title"
}

HELP[remove]='Removes a task

Use only for maintenance purposes'

x.remove() {
  if [[ -z "$1" ]]; then
    echo "Error: task not specified" && exit 1
  fi
  file="$(_find_task $1)"
  if [[ -z "$file" ]]; then
    echo "Error: task not found" && exit 1
  fi

  title="$(_get_title $file)"
  echo "$title"

  # Ask user to confirm removal of task
  read -p "Are you sure you want to remove this task? (y/N) " confirm
  confirm="${confirm,,}"
  if [[ "$confirm" =~ ^(yes|y)$ ]]; then
    git -C "$TODO_PATH" rm "$file"
    _commit "Removed: $title" 
  else
    echo "Task not removed"
  fi
}

HELP[show]='Opens a task in the pager'

x.show() {
  if [[ -z "$1" ]]; then
    echo "Error: task not specified" && exit 1
  fi
  file="$(_find_task $1)"
  if [[ -z "$file" ]]; then
    echo "Error: task not found" && exit 1
  fi

  $PAGER "$file"
}

HELP[edit]='Opens a task in the editor'

x.edit() {
  if [[ -z "$1" ]]; then
    echo "Error: task not specified" && exit 1
  fi
  file="$(_find_task $1)"
  if [[ -z "$file" ]]; then
    echo "Error: task not found" && exit 1
  fi

  $EDITOR "$file"
  title="$(_get_title $file)"
  git -C "$TODO_PATH" add "$file"
  _commit "Update: $title"
}

# TRANSITIONS


HELP[archive]='Moves a task from any status to archived'

x.archive() {
  if [[ -z "$1" ]]; then
    echo "Error: task not specified" && exit 1
  fi
  file="$(_find_task $1)"
  if [[ -z "$file" ]]; then
    echo "Error: task not found" && exit 1
  fi

  title="$(_get_title $file)"
  echo "$title"

  # Ask user to confirm archiving of task
  read -p "Are you sure you want to archive this task? (y/N) " confirm
  confirm="${confirm,,}"
  if [[ "$confirm" =~ ^(yes|y)$ ]]; then
    git -C "$TODO_PATH" mv "$file" "$TODO_PATH/archived/$1.md"
    _commit "Archived: $title"
  else
    echo "Task not archived"
  fi
}


HELP[start]='Moves a task from todo to working'

x.start() {
  _check_file "todo" "$1"
  file="$TODO_PATH/todo/$1.md"
  title="$(_get_title $file)"
  git -C "$TODO_PATH" mv "$file" "$TODO_PATH/working/"
  _commit "Start: $title"
  x.list.working
}

HELP[pause]='Moves a task from working to todo'

x.pause() {
  _check_file "working" "$1"
  file="$TODO_PATH/working/$1.md"
  title="$(_get_title $file)"
  git -C "$TODO_PATH" mv "$file" "$TODO_PATH/todo/"
  _commit "Pause: $title"
  x.list.todo
}

HELP[finish]='Moves a task from working to finished'

x.finish() {
  _check_file "working" "$1"
  file="$TODO_PATH/working/$1.md"
  title="$(_get_title $file)"
  git -C "$TODO_PATH" mv "$file" "$TODO_PATH/finished/"
  _commit "Finish: $title"
  x.list.finished
}

HELP[restart]='Moves a task from finished to todo'

x.restart() {
  _check_file "finished" "$1"
  file="$TODO_PATH/finished/$1.md"
  title="$(_get_title $file)"
  git -C "$TODO_PATH" mv "$file" "$TODO_PATH/todo/"
  _commit "Restart: $title"
  x.list.todo
}

HELP[recover]='Moves a task from archived to todo'

x.recover() {
  _check_file "archived" "$1"
  file="$TODO_PATH/archived/$1.md"
  title="$(_get_title $file)"
  git -C "$TODO_PATH" mv "$file" "$TODO_PATH/todo/"
  _commit "Recover: $title"
  x.list.todo
}

HELP[log]='Check the git logs'

x.log() { git -C "$TODO_PATH" log; }

HELP[remote]='Configures remote repository'

x.remote() {
  if [[ -z "$1" ]]; then
    echo "Error: Remote can't be empty"
    exit 1
  fi
  git -C "$TODO_PATH" remote add "origin" "$1"
  x.config remote "$1"
}

HELP[push]='Force a push to remote repository if is set'

x.push() {
  if [[ -z "$REMOTE" ]]; then
    printf "Error: Remote not set

  Usage: $EXE \e[031mremote [repo-url]\e[0m\n"
    exit 1
  fi
  git -C "$TODO_PATH" push
}

_commit() {
  git -C "$TODO_PATH" commit -qm "$1"
  if [[ ! -z "$REMOTE" ]]; then
    git -C "$TODO_PATH" push
  fi
}

_isosec() {
  date -u '+%Y%m%d%H%M%S'
}

_check_file() {
  if [[ -z "$2" ]]; then
    echo "Error: no task specified"
    return 1
  fi
  if [[ ! -e "$TODO_PATH/$1/$2.md" ]]; then
    echo "Error: task doesn't exist"
    return 1
  fi
}

_find_task() {
  for category in "${CATEGORIES[@]}"; do
    if [[ -e "$TODO_PATH/$category/$1.md" ]]; then
      echo "$TODO_PATH/$category/$1.md"
      return 0
    fi
  done
  echo ""
}

_print_items() {
  for file in $TODO_PATH/$1/*; do
    title="$(_get_title $file)"
    uuid="${file##*/}"
    uuid="${uuid%.*}"
    echo "  [$uuid] $title"
  done
}

_get_title() {
  echo "$(head -n 1 $1 | sed 's/^# //')"
}

_create_dirs() {
  for category in "${CATEGORIES[@]}"; do
    if [ ! -d "$TODO_PATH/$category" ]; then
      mkdir -p "$TODO_PATH/$category"
    fi
  done
}

############################## BOILERPLATE ###########################
## Everything from here to the end of file can be snipped and updated
## with latest from https://github.com/rwxrob/template-bash-command.

# ------------------------------- usage ------------------------------

HELP[usage]='
Display all possible commands. Note that this is usually easier by
simply using tab completion instead.'

x.usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# ------------------------------- help -------------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

x.help() { 
  local name="${1:-main}" title body file
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    title="$EXE $name"
    [[ $name == main ]] && title="$EXE"
  fi
  if [[ $name == main ]]; then
    body=$(x.readme)
    body=${body#*$title}
  else
    body="${HELP[$name]}"
  fi
  file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# ------------------------------ readme ------------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

x.readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

# ------------------------------ config ------------------------------

HELP[config]='

```
'"$EXE"' config
'"$EXE"' config KEY
'"$EXE"' config.set KEY VALUE
'"$EXE"' config.set KEY ""
'"$EXE"' config.keys
'"$EXE"' config.values
'"$EXE"' config.directory
'"$EXE"' config.path [file]
'"$EXE"' config.edit [file]
'"$EXE"' config.delete
'"$EXE"' config.read
'"$EXE"' config.write
'"$EXE"' config.dump
```

The `config` command is for reading, writing, and displaying standard
open desktop configuration properties. 

### Arguments

With no arguments calls `dump` and outputs all the currently cached
configuration settings.

With a single KEY argument fetches the value for that key and outputs
it unless it is one of the following special (reserved) key names:

* `directory` full path to config directory
* `path`   full path to specific config file (default: `values`) 
* `edit`   opens config file in editor (default: `editor` or `$EDITOR)
* `keys`   output the configuration keys, one per line
* `values` output the configuration values, one per line
* `delete` if key argument then delete a specific key, otherwise prompt
* `read` reads the configuration file into CONF associative array
* `write` write the CONF associative array to the configuration file
* `dump` write the flattened CONF associative array to standard output

With more than one argument the remaining arguments after the KEY will
be combined into the VALUE and written to a `values` file in the
configuration directory. 

### Configuration Directory

The configuration directory path relies on the following environment
variables:

* `EXE` - defaults to name of currently running command ('"$EXE"')
* `HOME` - checked for `$HOME/.config/$EXE/values`
* `XDG_CONFIG_HOME` - overrides `$HOME/.config`
* `CONFIG_DIR` - full path to directory containing `values` file

The `CONFIG_DIR` always takes priority over anything else if set, but is
never implied. If the directory does not exist it will be created the
first time a value is set.

### Configuration `values` File Format

The file (which is almost always located at
`~/.config/'"$EXE"'/values`) uses the simplest possible format to
facilitate standard UNIX parsing and filtering with any number of
existing tools (and no `jq` dependency).

* One KEY=VALUE per line
* KEYs may be anything but the equal sign (`=`)
* VALUEs may be anything but line returns must be escaped

Note that, although similar, this is *not* the same as Java properties
and other similar format. It is designed for ultimate simplicity,
efficiency, and portability.'

x.config() {
  case $# in
    0) x.config.dump ;;
    1) x.config.get "$@" ;;
    *) x.config.set "$@" ;;
  esac
}

x.config.edit() {
  : "${CONF[editor]:="${EDITOR:=vi}"}"
  exec "${CONF[editor]}" "$(x.config.path "${1:-values}")"
}

x.config.delete() {
  if [[ -z "$1" ]];then
    select key in "${!CONF[@]}"; do
      x.config.delete "$key"
      return $? 
    done
  fi
  x.config.set "$1" ''
}

x.config.keys() { printf "%s\n" "${!CONF[@]}"; }

x.config.values() { printf "%s\n" "${CONF[@]}"; }

x.config.dir() {
  local dir="$HOME/.config/$EXE"
  [[ -n "$XDG_CONFIG_HOME" ]] && dir="$XDG_CONFIG_HOME/$EXE" 
  [[ -n "$CONFIG_DIR" ]] && dir="$CONFIG_DIR"
  [[ -n "$1" ]] && echo "$dir/$1" && return 0
  printf "%s" "$dir"
  [[ -t 1 ]] && echo
  return 0
}

x.config.path() { 
  local file=${1:-values}
  printf "%s/%s" "$(x.config.dir)" "$file"
  [[ -t 1 ]] && echo
  return 0
}

x.config.set() {
  local key="$1"; shift; local val="$*"
  val="${val//$'\n'/\\n}"
  CONF["$key"]="$val"
  x.config.write
}

x.config.get() { 
  printf "%s" "${CONF[$1]}"
  [[ -t 1 ]] && echo
  return 0
}

x.config.read() {
  local values="$(x.config.path)"
  [[ -r "$values" ]] || return 0
  while IFS= read -r line; do
    [[ $line =~ ^([^=]+)=(.+)$ ]] || continue
    CONF["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
  done < "$values"
}

x.config.write() {
  local dir="$(x.config.dir)"
  mkdir -p "$dir"
  x.config.dump > "$dir/values"
}

x.config.dump() {
  (( ${#CONF[@]} == 0 )) && return 0
  paste -d=\
    <(printf "%s\n" "${!CONF[@]}") \
    <(printf "%s\n" "${CONF[@]}") \
  | sort
}

# ----------------------------- utilities ----------------------------

_jsonstr() {
  _checkdep jq || return $?
  _buffer "$@" && return $?
  jq -MRsc <<< "$1"
}

_urlencode() {
  _buffer "$@" && return $?
  local string="$1"
  local strlen=${#string}
  local encoded=""
  local pos c o
  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
    [-_.~a-zA-Z0-9]) o="$c" ;;
    *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="$o"
  done
  echo "$encoded"
}

_reduce() {
  local -n name="${1:?"name of array required"}"
  while IFS= read -r key; do
    [[ $key =~ $2 ]] && echo "$key"
  done < <(printf "%s\n" "${name[@]}")
}

_newest() {
  IFS=$'\n'
  mapfile -t f < <(ls -1 --color=never -trd "${1:-.}"/* 2>/dev/null)
  [[ ${#f} > 0 ]] && echo "${f[-1]}"
}

_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_join() { local IFS="$1"; shift; echo "$*"; }

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

_prompt() {
  local key="$1" def="$2" regx="$3" value first=yes
  shift 3
  local text="${*:-Enter value for %s [%s]: }"
  [[ -z "$key" ]] && echo "Missing prompt key" >&2 && return 1
  [[ -z "$regx" ]] && echo "Missing valid regx" >&2 && return 1
  while [[ ! $value =~ $regx ]];do
    printf "$text" "$key" "$def" >&2
    IFS= read -r value
    [[ -z "$value" ]] && value="$def"
    [[ $value =~ ^\ +$ ]] && value=""
    [[ -n "$first" ]] && unset first && continue
    echo "Must match /$regx/" >&2
  done
  _trim "$value"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

x.config.read
_have _initialize && _initialize "$@"

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

if _have _alternatives; then
  _alternatives "$@" 
  exit $?
fi

x.usage "$@"
